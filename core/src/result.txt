// Bullet.java
// Добавлен Circle для отслеживания столкновений
package com.geekbrains.td;

import com.badlogic.gdx.math.Circle;
import com.badlogic.gdx.math.Vector2;

public class Bullet implements Poolable {
    private Vector2 position;
    private Vector2 velocity;
    private boolean active;
    private Circle solidBody;

    public Vector2 getPosition() {
        return position;
    }

    public Vector2 getVelocity() {
        return velocity;
    }

    public Circle getSolidBody() {
        return solidBody;
    }

    public void updateSolidBodyPosition() {
        this.solidBody.set(this.position.x + 8, this.position.y + 8, 16);
    }

    @Override
    public boolean isActive() {
        return active;
    }

    public void deactivate() {
        this.active = false;
    }

    public Bullet() {
        this.position = new Vector2(0, 0);
        this.velocity = new Vector2(0, 0);
        this.active = false;
        this.solidBody = new Circle(0, 0, 16);
    }

    public void setup(float x, float y, float vx, float vy) {
        this.position.set(x, y);
        this.velocity.set(vx, vy);
        this.active = true;
    }
}

// BulletEmitter.java
// Добавлено обновление позиции Circle
package com.geekbrains.td;

import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.MathUtils;

public class BulletEmitter extends ObjectPool<Bullet> {
    private GameScreen gameScreen;
    private TextureRegion bulletTexture;

    @Override
    protected Bullet newObject() {
        return new Bullet();
    }

    public BulletEmitter(GameScreen gameScreen) {
        this.gameScreen = gameScreen;
        this.bulletTexture = Assets.getInstance().getAtlas().findRegion("star16");
    }

    public void setup(float x, float y, float vx, float vy) {
        Bullet b = getActiveElement();
        b.setup(x, y, vx, vy);
    }

    public void render(SpriteBatch batch) {
        batch.setColor(1,0,0,1);
        for (int i = 0; i < activeList.size(); i++) {
            Bullet b = activeList.get(i);
            batch.draw(bulletTexture, b.getPosition().x - 8, b.getPosition().y - 8);
        }
        batch.setColor(1,1,1,1);
    }

    public void update(float dt) {
        for (int i = 0; i < activeList.size(); i++) {
            Bullet b = activeList.get(i);
            b.getPosition().mulAdd(b.getVelocity(), dt);
            b.updateSolidBodyPosition();
            gameScreen.getParticleEmitter().setup(b.getPosition().x, b.getPosition().y, MathUtils.random(-25, 25), MathUtils.random(-25, 25), 0.1f,1.2f,0.2f,1,0,0,1,1,1,0,1);
        }
    }
}

// Monster.java
// Добавлен Circle для отслеживания столкновений. Добавлен метод деактивации и метод уменьшения здоровья при столкновении с пулей
// Добавлена проверка на достижении нулевой клетки по оси Х для уменьшения очков игрока и деактивации монстра
package com.geekbrains.td;

import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Circle;
import com.badlogic.gdx.math.Vector2;

import java.util.ArrayList;
import java.util.List;

public class Monster implements Poolable {
    private GameScreen gameScreen;
    private Map map;

    private TextureRegion texture;
    private TextureRegion textureHp;
    private Vector2 position;
    private Vector2 destination;

    private int currentPoint;
    private Vector2 velocity;

    private int hp;
    private int hpMax;

    private Circle solidBody;

    private boolean active;

    @Override
    public boolean isActive() {
        return active;
    }

    public Vector2 getPosition() {
        return position;
    }

    public Circle getSolidBody() {
        return solidBody;
    }

    public Monster(GameScreen gameScreen) {
        this.gameScreen = gameScreen;
        this.map = gameScreen.getMap();
        this.texture = Assets.getInstance().getAtlas().findRegion("monster");
        this.textureHp = Assets.getInstance().getAtlas().findRegion("monsterHp");
        this.position = new Vector2(640, 360);
        this.destination = new Vector2(0, 0);
        this.velocity = new Vector2(0, 0);
        this.hpMax = 100;
        this.hp = this.hpMax;
        this.active = false;
        this.solidBody = new Circle(this.position.x, this.position.y, 32);
    }

    public void activate(float x, float y) {
        this.texture = Assets.getInstance().getAtlas().findRegion("monster");
        this.textureHp = Assets.getInstance().getAtlas().findRegion("monsterHp");
        this.position = new Vector2(x, y);
        this.velocity = new Vector2(-100.0f, 0.0f);
        this.hpMax = 100;
        this.hp = this.hpMax;
        this.getNextPoint();
        this.active = true;
    }

    public void getNextPoint() {
        List<Vector2> path = new ArrayList<>();
        path.add(position);
        for (int i = 0; i < 5; i++) {
            Vector2 tmp = path.get(path.size() - 1);
            int tmpCX = (int) (tmp.x / 80);
            int tmpCY = (int) (tmp.y / 80);
            if (tmpCX > 0 && map.isCellEmpty(tmpCX - 1, tmpCY)) {
                path.add(new Vector2((tmpCX - 1) * 80 + 40, tmpCY * 80 + 40));
            } else if (tmpCY < 8 && map.isCellEmpty(tmpCX, tmpCY + 1)) {
                path.add(new Vector2(tmpCX * 80 + 40, (tmpCY + 1) * 80 + 40));
            } else if (tmpCY > 0 && map.isCellEmpty(tmpCX, tmpCY - 1)) {
                path.add(new Vector2(tmpCX * 80 + 40, (tmpCY - 1) * 80 + 40));
            } else {
                path.add(tmp);
            }
        }
        destination.set(path.get(1));
    }

    public void render(SpriteBatch batch) {
        batch.draw(texture, position.x - 40, position.y - 40);
        batch.draw(textureHp, position.x - 40, position.y + 40 - 12, 56 * ((float) hp / hpMax), 12);
    }

    public void update(float dt) {
        velocity.set(destination).sub(position).nor().scl(100.0f);
        position.mulAdd(velocity, dt);
        this.solidBody.set(this.position.x + 32, this.position.y + 32, 26);

        if (position.x < 42) {
            deactivate();
            gameScreen.monsterEnteredTower();
        }

        if (position.dst(destination) < 2.0f) {
            getNextPoint();
        }

    }

    public void deactivate() {
        this.active = false;
    }

    public void damaged(int hp) {
        this.hp -= hp;

        if (this.hp <= 0) {
            deactivate();
            gameScreen.monsterKilled();
        }
    }
}

// GameScreen.java
// В checkCollision добавлена проверка столкновения всех активных пуль со всеми активными монстрами.
// Добавлены методы действий при убийстве монстра и при достижении им нулевой клетки по оси Х
package com.geekbrains.td;

import com.badlogic.gdx.*;
import com.badlogic.gdx.graphics.Camera;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Vector2;

public class GameScreen implements Screen {
    private SpriteBatch batch;
    private Vector2 mousePosition;
    private Camera camera;
    private Map map;
    private Turret turret;
    private TextureRegion selectedCellTexture;
    private ParticleEmitter particleEmitter;
    private MonsterEmitter monsterEmitter;
    private BulletEmitter bulletEmitter;
    private BitmapFont font24;
    private int selectedCellX, selectedCellY;
    private float monsterTimer;

    private Player player;

    public Map getMap() {
        return map;
    }

    public ParticleEmitter getParticleEmitter() {
        return particleEmitter;
    }

    public MonsterEmitter getMonsterEmitter() {
        return monsterEmitter;
    }

    public BulletEmitter getBulletEmitter() {
        return bulletEmitter;
    }

    public GameScreen(SpriteBatch batch, Camera camera) {
        this.batch = batch;
        this.camera = camera;
    }

    @Override
    public void show() {
        this.player = new Player();
        mousePosition = new Vector2(0, 0);
        InputProcessor myProc = new InputAdapter() {
            @Override
            public boolean touchDown(int screenX, int screenY, int pointer, int button) {
                mousePosition.set(screenX, screenY);
                ScreenManager.getInstance().getViewport().unproject(mousePosition);

                if (selectedCellX == (int) (mousePosition.x / 80) && selectedCellY == (int) (mousePosition.y / 80)) {
                    map.setWall((int) (mousePosition.x / 80), (int) (mousePosition.y / 80));
                }

                selectedCellX = (int) (mousePosition.x / 80);
                selectedCellY = (int) (mousePosition.y / 80);

                return true;
            }
        };
        // InputMultiplexer im = new InputMultiplexer(stage, myProc);
        Gdx.input.setInputProcessor(myProc);

        this.particleEmitter = new ParticleEmitter();
        this.font24 = Assets.getInstance().getAssetManager().get("fonts/zorque24.ttf");
        this.bulletEmitter = new BulletEmitter(this);
        this.map = new Map("level01.map");
        this.monsterEmitter = new MonsterEmitter(this);
        this.turret = new Turret(this);
        this.selectedCellTexture = Assets.getInstance().getAtlas().findRegion("cursor");
    }

    @Override
    public void render(float delta) {
        float dt = Gdx.graphics.getDeltaTime();
        update(dt);
        batch.begin();
        map.render(batch);

        batch.setColor(1, 1, 0, 0.5f);
        batch.draw(selectedCellTexture, selectedCellX * 80, selectedCellY * 80);
        batch.setColor(1, 1, 1, 1);

        monsterEmitter.render(batch);
        turret.render(batch);
        bulletEmitter.render(batch);
        particleEmitter.render(batch);

        font24.draw(batch, "SCORE: " + player.getScore() + "    HP: " + player.getHp() + "    MONEY: " + player.getCash(), 20, 700);
        batch.end();
    }

    public void update(float dt) {
        particleEmitter.setup(640, 360, MathUtils.random(-20.0f, 20.0f), MathUtils.random(20.0f, 80.0f), 0.9f, 1.0f, 0.2f, 1, 0, 0, 1, 1, 1, 0, 1);
        map.update(dt);
        monsterEmitter.update(dt);
        turret.update(dt);
        particleEmitter.update(dt);
        generateMonsters(dt);
        bulletEmitter.update(dt);
        checkCollisions();
        monsterEmitter.checkPool();
        particleEmitter.checkPool();
        bulletEmitter.checkPool();
    }

    public void checkCollisions() {
        for (int i = 0; i < bulletEmitter.getActiveList().size(); i++) {
            Bullet b = bulletEmitter.getActiveList().get(i);
            if (b.getPosition().x < 0 || b.getPosition().x > 1280 ||
                    b.getPosition().y < 0 || b.getPosition().y > 720) {
                b.deactivate();
                continue;
            }
            if (!map.isCellEmpty((int) (b.getPosition().x / 80), (int) (b.getPosition().y / 80))) {
                b.deactivate();
            }

            for (int j = 0; j < monsterEmitter.getActiveList().size(); j++) {
                Monster m = monsterEmitter.getActiveList().get(j);

                if (b.getSolidBody().overlaps(m.getSolidBody())) {
                    b.deactivate();
                    m.damaged(25);
                }
            }
        }
    }

    public void generateMonsters(float dt) {
        monsterTimer += dt;
        if (monsterTimer > 3.0f) {
            monsterTimer = 0;
            monsterEmitter.setup(15, MathUtils.random(0, 8));
        }
    }

    public void monsterKilled() {
        player.increaseScore(1);
        player.increaseCash(100);
    }

    public void monsterEnteredTower() {
        player.decreaseHp(1);
    }

    @Override
    public void resize(int width, int height) {
        ScreenManager.getInstance().resize(width, height);
    }

    @Override
    public void pause() {
    }

    @Override
    public void resume() {
    }

    @Override
    public void hide() {
    }

    @Override
    public void dispose() {
    }
}

// Player.java
package com.geekbrains.td;

public class Player {
    private int score;
    private int hp;
    private int cash;

    public Player() {
        score = 0;
        hp = 40;
        cash = 250;
    }

    public int getScore() {
        return score;
    }

    public void increaseScore(int score) {
        this.score += score;
    }

    public int getHp() {
        return hp;
    }

    public void decreaseHp(int hp) {
        this.hp -= hp;
    }

    public int getCash() {
        return cash;
    }

    public void increaseCash(int cash) {
        this.cash += cash;
    }

    public void decreaseCash(int cash) {
        this.cash -= cash;
    }
}
