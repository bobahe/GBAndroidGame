// Assets.java
package com.geekbrains.td;
...

    public void loadAssets(ScreenManager.ScreenType type) {
        switch (type) {
            case GAME:
                assetManager.load("images/game.pack", TextureAtlas.class);
                createStandardFont(24);
                createStandardFont(36);
                break;
            case MENU:
                assetManager.load("images/game.pack", TextureAtlas.class);
                createStandardFont(24);
                break;
        }
    }
...

// GameScreen.java
package com.geekbrains.td;

...

public class GameScreen implements Screen {
    ...
    private int waveLevel;
    private float mainTimer;
    private float supportTimer;
    ...
    private MadKing king;

    ...
    private Group groupIngameMenu;

    ...

    public MadKing getKing() {
        return king;
    }

    ...

    public void createGUI() {
        ...

        groupIngameMenu = new Group();
        groupIngameMenu.setPosition(1100, 600);
        Button btnExitToMainMenu = new TextButton("Main menu", skin, "simpleSkin");
        btnExitToMainMenu.setPosition(0, 0);
        groupIngameMenu.addActor(btnExitToMainMenu);

        btnExitToMainMenu.addListener(new ChangeListener() {
            @Override
            public void changed(ChangeEvent event, Actor actor) {
                ScreenManager.getInstance().changeScreen(ScreenManager.ScreenType.MENU);
            }
        });

        ...
        stage.addActor(groupIngameMenu);

        ...
    }

    @Override
    public void render(float delta) {
        ...
        king.render(batch);
        ...
    }

    public void update(float dt) {
        ...
        king.update(dt);

        ...
    }

    public void checkMonstersInCastle() {
        for (int i = 0; i < monsterEmitter.getActiveList().size(); i++) {
            Monster m = monsterEmitter.getActiveList().get(i);
            if ((int) (m.getPosition().x / 80) == (int) (king.getPosition().x / 80) &&
                    (int) (m.getPosition().y / 80) == (int) (king.getPosition().y / 80)) {
                player.decreaseHp(5);
                m.deactivate();
            }
        }
    }

    ...

    public void generateMonsters(float dt) {
        mainTimer += dt;
        supportTimer += dt;

        if (supportTimer > 30.0f) {
            supportTimer = 0;
            waveLevel += (int) (mainTimer / 30) % 2;
        }

        monsterTimer += dt;
        if (monsterTimer > 2.0f - waveLevel * 0.5f) {
            monsterTimer = 0;
            monsterEmitter.setup(15, MathUtils.random(0, 8));
        }
    }

    ...
}

// MadKing.java
package com.geekbrains.td;

import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Vector2;

public class MadKing {
    private GameScreen gameScreen;

    private TextureRegion texture;

    private Vector2 position;
    private Vector2 velocity;
    private Vector2 destination;

    public Vector2 getPosition() {
        return position;
    }

    public MadKing(GameScreen gameScreen) {
        this.gameScreen = gameScreen;
        this.texture = Assets.getInstance().getAtlas().findRegion("star16");
        this.position = new Vector2(40, 320);
        this.destination = new Vector2(0, 0);
        getNextPoint();
        this.velocity = new Vector2(0, 0);
    }

    public void getNextPoint() {
        destination.set(MathUtils.random(0, 4), MathUtils.random(0, 8));
        destination.scl(80, 80).add(40, 40);
    }

    public void render(SpriteBatch batch) {
        batch.draw(texture, position.x - 40, position.y - 40, 80, 80);
//        batch.draw(textureBackHp, position.x - 30, position.y + 40 - 16);
//        batch.draw(textureHp, position.x - 30 + 2, position.y + 40 - 14, 56 * ((float) hp / hpMax), 12);
    }

    public void update(float dt) {
        velocity.set(destination).sub(position).nor().scl(150.0f);
        position.mulAdd(velocity, dt);
        if (position.dst(destination) < 2.0f) {
            getNextPoint();
        }
    }
}

// MenuScreen.java
package com.geekbrains.td;

import com.badlogic.gdx.*;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.scenes.scene2d.Group;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Button;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;

public class MenuScreen implements Screen {
    private SpriteBatch batch;
    private Vector2 mousePosition;
    private BitmapFont font24;
    private Stage stage;
    private Group groupMenu;

    public MenuScreen(SpriteBatch batch) {
        this.batch = batch;
    }

    @Override
    public void show() {
        mousePosition = new Vector2(0, 0);
        this.font24 = Assets.getInstance().getAssetManager().get("fonts/zorque24.ttf");
        createGUI();
    }

    public void createGUI() {
        stage = new Stage(ScreenManager.getInstance().getViewport(), batch);

        InputProcessor myProc = new InputAdapter() {
            @Override
            public boolean touchDown(int screenX, int screenY, int pointer, int button) {
                mousePosition.set(screenX, screenY);
                ScreenManager.getInstance().getViewport().unproject(mousePosition);
                return true;
            }
        };

        InputMultiplexer inputMultiplexer = new InputMultiplexer(stage, myProc);
        Gdx.input.setInputProcessor(inputMultiplexer);

        Skin skin = new Skin();
        skin.addRegions(Assets.getInstance().getAtlas());

        TextButton.TextButtonStyle menuButtonStyle = new TextButton.TextButtonStyle();

        menuButtonStyle.font = font24;
        menuButtonStyle.up = skin.getDrawable("shortButton");
        skin.add("simpleSkin", menuButtonStyle);

        groupMenu = new Group();
        groupMenu.setPosition(250, 340);

        Button btnNewGame = new TextButton("New game", skin, "simpleSkin");
        Button btnExit = new TextButton("Exit", skin, "simpleSkin");
        btnNewGame.setWidth(150);
        btnExit.setWidth(150);
        btnNewGame.setPosition(0, 110);
        btnExit.setPosition(0, 10);
        groupMenu.addActor(btnNewGame);
        groupMenu.addActor(btnExit);

        btnNewGame.addListener(new ChangeListener() {
            @Override
            public void changed(ChangeEvent event, Actor actor) {
                ScreenManager.getInstance().changeScreen(ScreenManager.ScreenType.GAME);
            }
        });

        btnExit.addListener(new ChangeListener() {
            @Override
            public void changed(ChangeEvent event, Actor actor) {
                Gdx.app.exit();
            }
        });

        stage.addActor(groupMenu);

        skin.dispose();
    }

    @Override
    public void render(float delta) {
        float dt = Gdx.graphics.getDeltaTime();
        update(dt);

        Gdx.gl.glClearColor(0, 0, 0, 1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        stage.draw();
    }

    public void update(float dt) {
        stage.act(dt);
    }

    @Override
    public void resize(int width, int height) {
        ScreenManager.getInstance().resize(width, height);
    }

    @Override
    public void pause() {

    }

    @Override
    public void resume() {

    }

    @Override
    public void hide() {

    }

    @Override
    public void dispose() {

    }
}

// Monster.java
package com.geekbrains.td;

...

public class Monster implements Poolable {
    ...

    public void getNextPoint() {
        map.buildRoute((int) (gameScreen.getKing().getPosition().x / 80),
                (int) (gameScreen.getKing().getPosition().y / 80), (int) (position.x / 80), (int) (position.y / 80), destination);
        destination.scl(80, 80).add(40, 40);
    }

    ...
}

// ScreenManager.java
package com.geekbrains.td;

...

public class ScreenManager {
    public enum ScreenType {
        GAME,
        MENU
    }

    ...

    public void init(TowerDefenseGame game, SpriteBatch batch) {
        ...
        this.menuScreen = new MenuScreen(batch);
    }

    public void resize(int width, int height) {
        viewport.update(width, height);
        viewport.apply();
    }

    public void resetCamera() {
        camera.position.set(WORLD_WIDTH / 2, WORLD_HEIGHT / 2, 0);
        camera.update();
        batch.setProjectionMatrix(camera.combined);
    }

    public void changeScreen(ScreenType type) {
        ...
        switch (type) {
            case GAME:
                targetScreen = gameScreen;
                Assets.getInstance().loadAssets(ScreenType.GAME);
                break;
            case MENU:
                targetScreen = menuScreen;
                Assets.getInstance().loadAssets(ScreenType.MENU);
                break;
        }
    }

    public void goToTarget() {
        game.setScreen(targetScreen);
    }
}

// TowerDefenseGame.java
package com.geekbrains.td;

...

public class TowerDefenseGame extends Game {
    ...

    @Override
    public void create() {
        ...
        ScreenManager.getInstance().changeScreen(ScreenManager.ScreenType.MENU);
    }

    ...
}
